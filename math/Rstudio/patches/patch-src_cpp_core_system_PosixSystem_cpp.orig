$OpenBSD$

remove prctl which is a Linuxism
remove sysinfo.h
remove executablePath functionality
remove other code that's not available

Index: src/cpp/core/system/PosixSystem.cpp
--- src/cpp/core/system/PosixSystem.cpp.orig
+++ src/cpp/core/system/PosixSystem.cpp
@@ -45,7 +45,7 @@
 #include <libproc.h>
 #endif
 
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
 #include <sys/prctl.h>
 #include <sys/sysinfo.h>
 #include <linux/kernel.h>
@@ -672,6 +672,11 @@ Error executablePath(const char * argv0,
 
    executablePath = std::string("/proc/self/exe");
 
+#elif defined(__OpenBSD__)
+
+   // this functionality is not available on OpenBSD
+   executablePath = std::string("NOTAVAILABLE_ON_OPENBSD");
+
 #else
 
    // Note that this technique will NOT work if the executable was located
@@ -1082,7 +1087,7 @@ Error osResourceLimit(ResourceLimit limit, int* pLimit
    switch(limit)
    {
       case MemoryLimit:
-         *pLimit = RLIMIT_AS;
+         *pLimit = RLIMIT_DATA;
          break;
       case FilesLimit:
          *pLimit = RLIMIT_NOFILE;
@@ -1102,7 +1107,7 @@ Error osResourceLimit(ResourceLimit limit, int* pLimit
       case CpuLimit:
          *pLimit = RLIMIT_CPU;
          break;
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
       case NiceLimit:
          *pLimit = RLIMIT_NICE;
          break;
@@ -1175,7 +1180,7 @@ Error systemInformation(SysInfo* pSysInfo)
 {
    pSysInfo->cores = boost::thread::hardware_concurrency();
 
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
    struct sysinfo info;
    if (::sysinfo(&info) == -1)
       return systemError(errno, ERROR_LOCATION);
@@ -1232,6 +1237,10 @@ core::Error pidof(const std::string& process, std::vec
 
 Error processInfo(const std::string& process, std::vector<ProcessInfo>* pInfo, ProcessFilter filter)
 {
+
+#ifndef __OpenBSD__
+   // not supported on OpenBSD
+   return Success;
    // clear the existing process info
    pInfo->clear();
 
@@ -1354,6 +1363,7 @@ Error processInfo(const std::string& process, std::vec
    if (pDir != NULL)
       ::closedir(pDir);
 
+#endif
    return Success();
 }
 
@@ -1520,7 +1530,7 @@ void printCoreDumpable(const std::string& context)
    ostr << "  hard limit: " << rLimitHard << std::endl;
 
    // ptrace
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
    int dumpable = ::prctl(PR_GET_DUMPABLE, NULL, NULL, NULL, NULL);
    if (dumpable == -1)
       LOG_ERROR(systemError(errno, ERROR_LOCATION));
