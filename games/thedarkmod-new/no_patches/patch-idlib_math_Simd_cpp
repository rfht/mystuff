$OpenBSD$

replace the CPUID macros with their hex values from sys/sys_public.h

Index: idlib/math/Simd.cpp
--- idlib/math/Simd.cpp.orig
+++ idlib/math/Simd.cpp
@@ -43,7 +43,7 @@ idSIMD::Init
 */
 void idSIMD::Init( void ) {
 	generic = new idSIMD_Generic;
-	generic->cpuid = CPUID_GENERIC;
+	generic->cpuid = 0x00002;	// = CPUID_GENERIC
 	processor = NULL;
 	SIMDProcessor = generic;
 }
@@ -80,17 +80,17 @@ void idSIMD::InitProcessor( const char *module, bool f
 
 	//idLib::common->Printf( "cpuid result is a=%x, c=%x, d=%x\n", a,c,d );
 
-	result = CPUID_GENERIC;
+	result = 0x00002;	// = CPUID_GENERIC
 	// "AuthenticAMD"
 	if (( 0x68747541l == a ) && ( 0x444d4163l == c ) && ( 0x69746e65l == d ) )
 	{
-		result = CPUID_AMD;
+		result = 0x00008;	// = CPUID_AMD
 	}
 	else
 		// "GenuineIntel"
 		if (( 0x756e6547l == a ) && ( 0x6c65746el == c ) && ( 0x49656e69l == d ) )
 		{
-		result = CPUID_INTEL;
+		result = 0x00004;	// = CPUID_INTEL
 		}
 	
 	__asm__ __volatile__ (
@@ -104,40 +104,40 @@ void idSIMD::InitProcessor( const char *module, bool f
 		: );							// clobbers no extra registers beside the outputs
 
 	// This can only be checked on AMD CPUs
-	if ( (result & CPUID_AMD) && (d & 0x10000000l) )		// >> 31 does not work here
+	if ( (result & 0x00008) && (d & 0x10000000l) )		// >> 31 does not work here
 	{
-		result += CPUID_3DNOW;
+		result += 0x00020;	// = CPUID_3DNOW
 	}
 	// The calculation how many physical/logical CPUs the machine has is rather
 	// convuluted and differes between AMD and Intel, so we don't attempt it, we
 	// only check bits 16..23 of EBX to see if it is > 1:
 	cores = (a >> 16) & 0xFF;
 	// Only on Intel we can have Hyper-Threading
-	if ( (result & CPUID_INTEL) && ((d >> 28) & 0x1) && cores > 1 )
+	if ( (result & 0x00004) && ((d >> 28) & 0x1) && cores > 1 )
 	{
-		result += CPUID_HTT;
+		result += 0x01000;	// = CPUID_HTT
 	}
 
 	// These tests are the same for AMD and Intel
 	if ((d >> 23) & 0x1)
 	{
-		result += CPUID_MMX;
+		result += 0x00010;	// = CPUID_MMX
 	}
 	if ((d >> 25) & 0x1)
 	{
-		result += CPUID_SSE;
+		result += 0x00040;	// = CPUID_SSE
 	}
 	if ((d >> 26) & 0x1)
 	{
-		result += CPUID_SSE2;
+		result += 0x00080;	// = CPUID_SSE2
 	}
 	if ((d >> 15) & 0x1)
 	{
-		result += CPUID_CMOV;
+		result += 0x02000;	// = CPUID_CMOV
 	}
 	if (c & 0x1)
 	{
-		result += CPUID_SSE3;
+		result += 0x00100;	// = CPUID_SSE3
 	}
 
 	//idLib::common->Printf( "cpuid result is %i (c = %i d = %i)\n", result, c, d);
@@ -147,24 +147,24 @@ void idSIMD::InitProcessor( const char *module, bool f
 	// Print what we found to console
 	idLib::common->Printf( "Found %s CPU%s, features:%s%s%s%s%s%s\n",
 			// Vendor
-			cpuid & CPUID_AMD ? "AMD" : 
-			cpuid & CPUID_INTEL ? "Intel" : 
-			cpuid & CPUID_GENERIC ? "Generic" : 
+			cpuid & 0x00008 ? "AMD" : 
+			cpuid & 0x00004 ? "Intel" : 
+			cpuid & 0x00002 ? "Generic" : 
 			"Unsupported",
 			// Hyper-Threading?
-			cpuid & CPUID_HTT ? " with Hyper-Threading enabled" : "",
+			cpuid & 0x01000 ? " with Hyper-Threading enabled" : "",
 
 			// the calculation how many physical/logical CPUs the machine has is rather
 			// convuluted and differes between AMD and Intel, so we don't attempt it:
 //			cores,
 //		   	cores > 1 ? "cores" : "core",
 			// Flags
-			cpuid & CPUID_MMX ? " MMX" : "",
-			cpuid & CPUID_SSE ? " SSE" : "",
-			cpuid & CPUID_SSE2 ? " SSE2" : "",
-			cpuid & CPUID_SSE3 ? " SSE3" : "",
-			cpuid & CPUID_3DNOW ? " 3DNow!" : "",
-			cpuid & CPUID_CMOV ? " CMOV" : "" );
+			cpuid & 0x00010 ? " MMX" : "",
+			cpuid & 0x00040 ? " SSE" : "",
+			cpuid & 0x00080 ? " SSE2" : "",
+			cpuid & 0x00100 ? " SSE3" : "",
+			cpuid & 0x00020 ? " 3DNow!" : "",
+			cpuid & 0x02000 ? " CMOV" : "" );
 
 	if ( forceGeneric ) {
 
@@ -173,17 +173,17 @@ void idSIMD::InitProcessor( const char *module, bool f
 	} else {
 
 		if ( !processor ) {
-			if ( ( cpuid & CPUID_ALTIVEC ) ) {
+			if ( ( cpuid & 0x00200 ) ) {
 				processor = new idSIMD_AltiVec;
-			} else if ( ( cpuid & CPUID_MMX ) && ( cpuid & CPUID_SSE ) && ( cpuid & CPUID_SSE2 ) && ( cpuid & CPUID_SSE3 ) ) {
+			} else if ( ( cpuid & 0x00010 ) && ( cpuid & 0x00040 ) && ( cpuid & 0x00080 ) && ( cpuid & 0x00100 ) ) {
 				processor = new idSIMD_SSE3;
-			} else if ( ( cpuid & CPUID_MMX ) && ( cpuid & CPUID_SSE ) && ( cpuid & CPUID_SSE2 ) ) {
+			} else if ( ( cpuid & 0x00010 ) && ( cpuid & 0x00040 ) && ( cpuid & 0x00080 ) ) {
 				processor = new idSIMD_SSE2;
-			} else if ( ( cpuid & CPUID_MMX ) && ( cpuid & CPUID_SSE ) ) {
+			} else if ( ( cpuid & 0x00010 ) && ( cpuid & 0x00040 ) ) {
 				processor = new idSIMD_SSE;
-			} else if ( ( cpuid & CPUID_MMX ) && ( cpuid & CPUID_3DNOW ) ) {
+			} else if ( ( cpuid & 0x00010 ) && ( cpuid & 0x00020 ) ) {
 				processor = new idSIMD_3DNow;
-			} else if ( ( cpuid & CPUID_MMX ) ) {
+			} else if ( ( cpuid & 0x00010 ) ) {
 				processor = new idSIMD_MMX;
 			} else {
 				processor = generic;
@@ -199,12 +199,12 @@ void idSIMD::InitProcessor( const char *module, bool f
 	}
 	idLib::common->Printf( "%s using %s for SIMD processing.\n", module, SIMDProcessor->GetName() );
 
-	if ( cpuid & CPUID_FTZ ) {
+	if ( cpuid & 0x04000 ) {
 		idLib::sys->FPU_SetFTZ( true );
 		idLib::common->Printf( "enabled Flush-To-Zero mode\n" );
 	}
 
-	if ( cpuid & CPUID_DAZ ) {
+	if ( cpuid & 0x08000 ) {
 		idLib::sys->FPU_SetDAZ( true );
 		idLib::common->Printf( "enabled Denormals-Are-Zero mode\n" );
 	}
@@ -4215,37 +4215,37 @@ void idSIMD::Test_f( const idCmdArgs &args ) {
 		argString.Remove( ' ' );
 
 		if ( idStr::Icmp( argString, "MMX" ) == 0 ) {
-			if ( !( cpuid & CPUID_MMX ) ) {
+			if ( !( cpuid & 0x00010 ) ) {
 				common->Printf( "CPU does not support MMX\n" );
 				return;
 			}
 			p_simd = new idSIMD_MMX;
 		} else if ( idStr::Icmp( argString, "3DNow" ) == 0 ) {
-			if ( !( cpuid & CPUID_MMX ) || !( cpuid & CPUID_3DNOW ) ) {
+			if ( !( cpuid & 0x00010 ) || !( cpuid & 0x00020 ) ) {
 				common->Printf( "CPU does not support MMX & 3DNow\n" );
 				return;
 			}
 			p_simd = new idSIMD_3DNow;
 		} else if ( idStr::Icmp( argString, "SSE" ) == 0 ) {
-			if ( !( cpuid & CPUID_MMX ) || !( cpuid & CPUID_SSE ) ) {
+			if ( !( cpuid & 0x00010 ) || !( cpuid & 0x00040 ) ) {
 				common->Printf( "CPU does not support MMX & SSE\n" );
 				return;
 			}
 			p_simd = new idSIMD_SSE;
 		} else if ( idStr::Icmp( argString, "SSE2" ) == 0 ) {
-			if ( !( cpuid & CPUID_MMX ) || !( cpuid & CPUID_SSE ) || !( cpuid & CPUID_SSE2 ) ) {
+			if ( !( cpuid & 0x00010 ) || !( cpuid & 0x00040 ) || !( cpuid & 0x00080 ) ) {
 				common->Printf( "CPU does not support MMX & SSE & SSE2\n" );
 				return;
 			}
 			p_simd = new idSIMD_SSE2;
 		} else if ( idStr::Icmp( argString, "SSE3" ) == 0 ) {
-			if ( !( cpuid & CPUID_MMX ) || !( cpuid & CPUID_SSE ) || !( cpuid & CPUID_SSE2 ) || !( cpuid & CPUID_SSE3 ) ) {
+			if ( !( cpuid & 0x00010 ) || !( cpuid & 0x00040 ) || !( cpuid & 0x00040 ) || !( cpuid & 0x00100 ) ) {
 				common->Printf( "CPU does not support MMX & SSE & SSE2 & SSE3\n" );
 				return;
 			}
 			p_simd = new idSIMD_SSE3();
 		} else if ( idStr::Icmp( argString, "AltiVec" ) == 0 ) {
-			if ( !( cpuid & CPUID_ALTIVEC ) ) {
+			if ( !( cpuid & 0x00200 ) ) {
 				common->Printf( "CPU does not support AltiVec\n" );
 				return;
 			}
