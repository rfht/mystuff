$OpenBSD$

rename hid_init() to hidapi_hid_init() to avoid collision with usbhid
add USBHID dev notes

Index: libusb/hid.c
--- libusb/hid.c.orig
+++ libusb/hid.c
@@ -143,6 +143,7 @@ struct input_report {
 
 
 struct hid_device_ {
+
 	/* Handle to the actual device. */
 	libusb_device_handle *device_handle;
 
@@ -175,6 +176,7 @@ struct hid_device_ {
 	struct input_report *input_reports;
 };
 
+// USBHID: not sure what to do with context
 static libusb_context *usb_context = NULL;
 
 uint16_t get_usb_code_for_current_locale(void);
@@ -337,6 +339,7 @@ static inline int libusb_get_string_descriptor(libusb_
 
 /* Get the first language the device says it reports. This comes from
    USB string #0. */
+// USBHID: replace handle. Not sure what 'language' refers to
 static uint16_t get_first_language(libusb_device_handle *dev)
 {
 	uint16_t buf[32];
@@ -354,6 +357,7 @@ static uint16_t get_first_language(libusb_device_handl
 	return buf[1]; /* First two bytes are len and descriptor type. */
 }
 
+
 static int is_language_supported(libusb_device_handle *dev, uint16_t lang)
 {
 	uint16_t buf[32];
@@ -490,7 +494,7 @@ static char *make_path(libusb_device *dev, int interfa
 }
 
 
-int HID_API_EXPORT hid_init(void)
+int HID_API_EXPORT hidapi_hid_init(void)
 {
 	if (!usb_context) {
 		const char *locale;
@@ -529,7 +533,7 @@ struct hid_device_info  HID_API_EXPORT *hid_enumerate(
 	struct hid_device_info *root = NULL; /* return object */
 	struct hid_device_info *cur_dev = NULL;
 
-	if(hid_init() < 0)
+	if(hidapi_hid_init() < 0)
 		return NULL;
 
 	num_devs = libusb_get_device_list(usb_context, &devs);
@@ -877,7 +881,7 @@ hid_device * HID_API_EXPORT hid_open_path(const char *
 	int d = 0;
 	int good_open = 0;
 
-	if(hid_init() < 0)
+	if(hidapi_hid_init() < 0)
 		return NULL;
 
 	dev = new_hid_device();
