$OpenBSD$

debug printfs

Index: mono/utils/mono-os-semaphore.h
--- mono/utils/mono-os-semaphore.h.orig
+++ mono/utils/mono-os-semaphore.h
@@ -84,6 +84,7 @@ mono_os_sem_destroy (MonoSemType *sem)
 static inline int
 mono_os_sem_wait (MonoSemType *sem, MonoSemFlags flags)
 {
+	printf("mono_os_sem_wait (mono-os-semaphore.h), thread: %p\n", pthread_self());
 	kern_return_t res;
 
 retry:
@@ -165,14 +166,17 @@ retry:
 static inline void
 mono_os_sem_post (MonoSemType *sem)
 {
+	printf("mono_os_sem_post (mono-os-semaphore.h), thread: %p\n", pthread_self());
 	kern_return_t res;
 
 retry:
-	res = semaphore_signal (*sem);
+	res = sem_post (sem);
 	if (G_UNLIKELY (res != KERN_SUCCESS && res != KERN_ABORTED))
+		printf("%s: semaphore_signal failed with error %d", __func__, res);
 		g_error ("%s: semaphore_signal failed with error %d", __func__, res);
 
 	if (res == KERN_ABORTED)
+		printf("KERN_ABORTED in mono_os_sem_post. thread: %p - retrying...\n", pthread_self());
 		goto retry;
 }
 
@@ -188,11 +192,17 @@ mono_os_sem_init (MonoSemType *sem, int value)
 	res = sem_init (sem, 0, value);
 	if (G_UNLIKELY (res != 0))
 		g_error ("%s: sem_init failed with \"%s\" (%d)", __func__, g_strerror (errno), errno);
+	int semval;
+	sem_getvalue(sem, &semval);
+	printf("mono_os_sem_init (mono-os-semaphore.h): %d\n", semval);
 }
 
 static inline void
 mono_os_sem_destroy (MonoSemType *sem)
 {
+	int semval;
+	sem_getvalue(sem, &semval);
+	printf("mono_os_sem_destroy (mono-os-semaphore.h): %d", semval);
 	int res;
 
 	res = sem_destroy (sem);
@@ -204,8 +214,11 @@ static inline int
 mono_os_sem_wait (MonoSemType *sem, MonoSemFlags flags)
 {
 	int res;
+	int semval;
 
 retry:
+	sem_getvalue(sem, &semval);
+	printf("mono_os_sem_wait (mono-os-semaphore.h): %d", semval);
 	res = sem_wait (sem);
 	if (G_UNLIKELY (res != 0 && errno != EINTR))
 		g_error ("%s: sem_wait failed with \"%s\" (%d)", __func__, g_strerror (errno), errno);
@@ -213,18 +226,26 @@ retry:
 	if (res != 0 && errno == EINTR && !(flags & MONO_SEM_FLAGS_ALERTABLE))
 		goto retry;
 
+	sem_getvalue(sem, &semval);
+	printf(" -> %d\n", semval);
 	return res != 0 ? -1 : 0;
 }
 
 static inline MonoSemTimedwaitRet
 mono_os_sem_timedwait (MonoSemType *sem, guint32 timeout_ms, MonoSemFlags flags)
 {
+	int semval;
+	sem_getvalue(sem, &semval);
+	printf("mono_os_sem_timedwait (mono-os-semaphore.h): %d", semval);
 	struct timespec ts, copy;
 	struct timeval t;
 	int res;
 
 	if (timeout_ms == 0) {
+		printf("timeout_ms == 0 (mono_os_sem_timedwait)\n");
 		res = sem_trywait (sem);
+		sem_getvalue(sem, &semval);
+		printf(" -> %d\n", semval);
 		if (G_UNLIKELY (res != 0 && errno != EINTR && errno != EAGAIN))
 			g_error ("%s: sem_trywait failed with \"%s\" (%d)", __func__, g_strerror (errno), errno);
 
@@ -238,8 +259,10 @@ mono_os_sem_timedwait (MonoSemType *sem, guint32 timeo
 			g_assert_not_reached ();
 	}
 
-	if (timeout_ms == MONO_INFINITE_WAIT)
+	if (timeout_ms == MONO_INFINITE_WAIT) {
+		printf("timeout_ms == MONO_INFINITE_WAIT (mono_os_sem_timedwait), calling ..._sem_wait\n");
 		return (MonoSemTimedwaitRet) mono_os_sem_wait (sem, flags);
+	}
 
 	res = gettimeofday (&t, NULL);
 	if (G_UNLIKELY (res != 0))
@@ -255,7 +278,10 @@ mono_os_sem_timedwait (MonoSemType *sem, guint32 timeo
 	copy = ts;
 
 retry:
+	printf("retry point of mono_os_sem_timedwait\n");
 	res = sem_timedwait (sem, &ts);
+	sem_getvalue(sem, &semval);
+	printf(" -> %d\n", semval);
 	if (G_UNLIKELY (res != 0 && errno != EINTR && errno != ETIMEDOUT))
 		g_error ("%s: sem_timedwait failed with \"%s\" (%d)", __func__, g_strerror (errno), errno);
 
@@ -277,11 +303,16 @@ retry:
 static inline void
 mono_os_sem_post (MonoSemType *sem)
 {
+	int semval;
+	sem_getvalue(sem, &semval);
+	printf("mono_os_sem_post(2) (mono-os-semaphore.h): %d", semval);
 	int res;
 
 	res = sem_post (sem);
 	if (G_UNLIKELY (res != 0))
 		g_error ("%s: sem_post failed with \"%s\" (%d)", __func__, g_strerror (errno), errno);
+	sem_getvalue(sem, &semval);
+	printf(" -> %d\n", semval);
 }
 
 #else
@@ -345,11 +376,15 @@ mono_os_sem_wait (MonoSemType *sem, MonoSemFlags flags
 static inline void
 mono_os_sem_post (MonoSemType *sem)
 {
+	printf("mono_os_sem_post (mono-os-semaphore.h), thread: %p\n", pthread_self());
 	BOOL res;
 
 	res = ReleaseSemaphore (*sem, 1, NULL);
-	if (G_UNLIKELY (res == 0))
+	if (G_UNLIKELY (res == 0)) {
+		printf("%s: ReleaseSemaphore failed with error %d\n", __func__, GetLastError ());
 		g_error ("%s: ReleaseSemaphore failed with error %d", __func__, GetLastError ());
+	} else {
+		printf("%s: ReleaseSemaphore succeeded.\n", __func__);
 }
 
 #endif
