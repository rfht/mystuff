$OpenBSD$

debug printf's

Index: mono/utils/mono-threads-coop.c
--- mono/utils/mono-threads-coop.c.orig
+++ mono/utils/mono-threads-coop.c
@@ -56,12 +56,16 @@ static MonoNativeTlsKey coop_reset_count_stack_key;
 static void
 coop_tls_push (gpointer cookie)
 {
+	printf(" in coop_tls_push() (in mono_threads_coop.c)\n");
 	GArray *stack;
 
 	stack = mono_native_tls_get_value (coop_reset_count_stack_key);
 	if (!stack) {
+		printf(" mono_native_tls_get_value didn't return anything\n");
 		stack = g_array_new (FALSE, FALSE, sizeof(gpointer));
 		mono_native_tls_set_value (coop_reset_count_stack_key, stack);
+	} else {
+		printf(" mono_native_tls_get_value returned 'stack'\n");
 	}
 
 	g_array_append_val (stack, cookie);
@@ -74,9 +78,12 @@ coop_tls_pop (gpointer received_cookie)
 	gpointer expected_cookie;
 
 	stack = mono_native_tls_get_value (coop_reset_count_stack_key);
-	if (!stack || 0 == stack->len)
+	if (!stack || 0 == stack->len) {
+		printf(" mono_native_tls_get_value didn't return anything\n");
 		mono_fatal_with_history ("Received cookie %p but found no stack at all\n", received_cookie);
+	}
 
+	printf(" mono_native_tls_get_value returned 'stack'\n");
 	expected_cookie = g_array_index (stack, gpointer, stack->len - 1);
 	stack->len --;
 
@@ -120,9 +127,11 @@ mono_threads_state_poll (void)
 static void
 mono_threads_state_poll_with_info (MonoThreadInfo *info)
 {
+	printf("mono_threads_state_poll_with_info\n");
 	g_assert (mono_threads_is_blocking_transition_enabled ());
 
 	++coop_do_polling_count;
+	printf("coop_do_polling_count: %d\n", coop_do_polling_count);
 
 	if (!info)
 		return;
@@ -133,10 +142,13 @@ mono_threads_state_poll_with_info (MonoThreadInfo *inf
 	if (!(info->thread_state & (STATE_ASYNC_SUSPEND_REQUESTED | STATE_SELF_SUSPEND_REQUESTED)))
 		return;
 
+	printf("no pending suspend requests (mono_threads_state_poll_with_info\n");
 	++coop_save_count;
+	printf("coop_save_count: %d", coop_save_count);
 	mono_threads_get_runtime_callbacks ()->thread_state_init (&info->thread_saved_state [SELF_SUSPEND_STATE_INDEX]);
 
 	/* commit the saved state and notify others if needed */
+	printf("commit the saved state and notify others if needed (mono_threads_state_poll_with_info)\n");
 	switch (mono_threads_transition_state_poll (info)) {
 	case SelfSuspendResumed:
 		break;
@@ -144,12 +156,14 @@ mono_threads_state_poll_with_info (MonoThreadInfo *inf
 		mono_thread_info_wait_for_resume (info);
 		break;
 	case SelfSuspendNotifyAndWait:
+		printf("SelfSuspendNotifyAndWait (mono_threads_state_poll_with_info)\n");
 		mono_threads_notify_initiator_of_suspend (info);
 		mono_thread_info_wait_for_resume (info);
 		break;
 	}
 
 	if (info->async_target) {
+		printf("async_target (mono_threads_state_poll_with_info)\n");
 		info->async_target (info->user_data);
 		info->async_target = NULL;
 		info->user_data = NULL;
